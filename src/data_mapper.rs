use std::error::Error;
use dbase::{FieldValue, Record};
use crate::parcel_record::ParcelRecord;
use duckdb::{Result, ToSql};

/// Maps a database record to a `ParcelRecord` struct.
/// Returns a `ParcelRecord` on success or an error on failure.
pub fn map_record_to_parcel(record: &Record) -> Result<ParcelRecord, Box<dyn Error>> {
    // Helper function to extract a String field
    fn get_string_field(record: &Record, field_name: &str) -> Option<String> {
        match record.get(field_name) {
            Some(FieldValue::Character(Some(value))) => Some(value.clone()),
            Some(FieldValue::Character(None)) => None,
            _ => None,
        }
    }
    fn get_numeric_field(record: &Record, field_name: &str) -> Option<f64> {
        match record.get(field_name) {
            Some(FieldValue::Numeric(value)) => *value,
            Some(FieldValue::Float(value)) => value.map(|v| v as f64),
            Some(FieldValue::Integer(value)) => Some(*value as f64),
            _ => None,
        }
    }
    let parcel_record = ParcelRecord {
        id: get_numeric_field(record, "ID"),

        clean_parcel: get_string_field(record, "CleanParcel"),
        county_code: get_numeric_field(record, "CountyCode"),
        county_name: get_string_field(record, "CountyName"),
        parcel_id: get_string_field(record, "ParcelID"),
        district_code: get_numeric_field(record, "DistrictCode"),
        district_name: get_string_field(record, "DistrictName"),
        map: get_string_field(record, "Map"),
        parcel_number: get_string_field(record, "ParcelNumber"),
        suffix: get_string_field(record, "Suffix"),
        legal_description: get_string_field(record, "LegalDescription"),
        legal_description_1: get_string_field(record, "LegalDescription1"),
        legal_description_2: get_string_field(record, "LegalDescription2"),
        full_legal_description: get_string_field(record, "FullLegalDescription"),
        deeded_acre: get_numeric_field(record, "DeededAcre"),
        calculated_acre: get_numeric_field(record, "CalculatedAcre"),
        tax_year: get_numeric_field(record, "TaxYear"),
        tax_district: get_string_field(record, "TaxDistrict"),
        tax_class: get_string_field(record, "TaxClass"),
        deed_book: get_string_field(record, "DeedBook"),
        deed_page: get_string_field(record, "DeedPage"),
        property_class: get_string_field(record, "PropertyClass"),
        property_type: get_string_field(record, "PropertyType"),
        owner_1: get_string_field(record, "Owner1"),
        owner_2: get_string_field(record, "Owner2"),
        full_owner_name: get_string_field(record, "FullOwnerName"),
        owner_address: get_string_field(record, "OwnerAddress"),
        owner_address_1: get_string_field(record, "OwnerAddress1"),
        owner_address_2: get_string_field(record, "OwnerAddress2"),
        owner_city: get_string_field(record, "OwnerCity"),
        owner_state: get_string_field(record, "OwnerState"),
        owner_zip: get_string_field(record, "OwnerZip"),
        care_of: get_string_field(record, "CareOf"),
        full_owner_address: get_string_field(record, "FullOwnerAddress"),
        new_owner: get_string_field(record, "NewOwner"),
        new_owner_address: get_string_field(record, "NewOwnerAddress"),
        new_owner_address_1: get_string_field(record, "NewOwnerAddress1"),
        new_owner_address_2: get_string_field(record, "NewOwnerAddress2"),
        full_new_owner: get_string_field(record, "FullNewOwner"),
        new_deed_book: get_string_field(record, "NewDeedBook"),
        new_deed_page: get_string_field(record, "NewDeedPage"),
        physical_number: get_numeric_field(record, "PhysicalNumber"),
        physical_direction: get_string_field(record, "PhysicalDirection"),
        physical_street: get_string_field(record, "PhysicalStreet"),
        physical_suffix: get_string_field(record, "PhysicalSuffix"),
        physical_unit_type: get_string_field(record, "PhysicalUnitType"),
        physical_city: get_string_field(record, "PhysicalCity"),
        physical_zip: get_string_field(record, "PhysicalZip"),
        physical_unit_id: get_string_field(record, "PhysicalUnitID"),
        full_physical_address: get_string_field(record, "FullPhysicalAddress"),
        occupancy_description: get_string_field(record, "OccupancyDescription"),
        hazard_occupancy: get_string_field(record, "HazardOccupancy"),
        land_use: get_string_field(record, "LandUse"),
        land_use_code: get_string_field(record, "LandUseCode"),
        year_built: get_numeric_field(record, "YearBuilt"),
        grade: get_string_field(record, "Grade"),
        style_code: get_string_field(record, "StyleCode"),
        style_description: get_string_field(record, "StyleDescription"),
        commercial: get_numeric_field(record, "Commercial"),
        stories: get_numeric_field(record, "Stories"),
        commercial_type_1: get_string_field(record, "CommercialType1"),
        basement_type: get_string_field(record, "BasementType"),
        exterior_wall: get_string_field(record, "ExteriorWall"),
        exterior_1: get_string_field(record, "Exterior1"),
        construction: get_string_field(record, "Construction"),
        total_rooms: get_numeric_field(record, "TotalRooms"),
        use_type: get_string_field(record, "UseType"),
        business_license: get_numeric_field(record, "BusinessLicense"),
        structure_area: get_numeric_field(record, "StructureArea"),
        cubic_feet: get_numeric_field(record, "CubicFeet"),
        units: get_numeric_field(record, "Units"),
        commercial_type_2: get_numeric_field(record, "CommercialType2"),
        card: get_numeric_field(record, "Card"),
        cards: get_numeric_field(record, "Cards"),
        dwelling_value: get_numeric_field(record, "DwellingValue"),
        commercial_type_3: get_numeric_field(record, "CommercialType3"),
        other_building: get_numeric_field(record, "OtherBuilding"),
        land_appraised: get_numeric_field(record, "LandApprai"),
        building_appraised: get_numeric_field(record, "BuildingAp"),
        total_appraised: get_numeric_field(record, "TotalAppra"),
        sams_address: get_string_field(record, "SamsAddress"),
        sams_city: get_string_field(record, "SamsCity"),
        sams_state: get_string_field(record, "SamsState"),
        sams_zip: get_string_field(record, "SamsZip"),
        pre_address_number: get_string_field(record, "PreAddressNumber"),
        address_number: get_string_field(record, "AddressNumber"),
        address_number_suffix: get_string_field(record, "AddressNumberSuffix"),
        full_name: get_string_field(record, "FullName"),
        unit_type: get_string_field(record, "UnitType"),
        unit_id: get_string_field(record, "UnitID"),
        alternate_unit_type: get_string_field(record, "AlternateUnitType"),
        alternate_unit_id: get_string_field(record, "AlternateUnitID"),
        flood_risks: get_string_field(record, "FloodRisks"),
        oby_count: get_numeric_field(record, "ObyCount"),
        sale_price: get_numeric_field(record, "SalePrice"),
        developer_id: get_string_field(record, "DeveloperID"),
        building_permits: get_numeric_field(record, "BuildingPermits"),
    };

    Ok(parcel_record)
}


pub fn parcel_record_2_sql(record: &ParcelRecord) -> Vec<&dyn ToSql> {
    let values: Vec<&dyn ToSql> = vec![
        &record.id,
        &record.clean_parcel,
        &record.county_code,
        &record.county_name,
        &record.parcel_id,
        &record.district_code,
        &record.district_name,
        &record.map,
        &record.parcel_number,
        &record.suffix,
        &record.legal_description,
        &record.legal_description_1,
        &record.legal_description_2,
        &record.full_legal_description,
        &record.deeded_acre,
        &record.calculated_acre,
        &record.tax_year,
        &record.tax_district,
        &record.tax_class,
        &record.deed_book,
        &record.deed_page,
        &record.property_class,
        &record.property_type,
        &record.owner_1,
        &record.owner_2,
        &record.full_owner_name,
        &record.owner_address,
        &record.owner_address_1,
        &record.owner_address_2,
        &record.owner_city,
        &record.owner_state,
        &record.owner_zip,
        &record.care_of,
        &record.full_owner_address,
        &record.new_owner,
        &record.new_owner_address,
        &record.new_owner_address_1,
        &record.new_owner_address_2,
        &record.full_new_owner,
        &record.new_deed_book,
        &record.new_deed_page,
        &record.physical_number,
        &record.physical_direction,
        &record.physical_street,
        &record.physical_suffix,
        &record.physical_unit_type,
        &record.physical_city,
        &record.physical_zip,
        &record.physical_unit_id,
        &record.full_physical_address,
        &record.occupancy_description,
        &record.hazard_occupancy,
        &record.land_use,
        &record.land_use_code,
        &record.year_built,
        &record.grade,
        &record.style_code,
        &record.style_description,
        &record.commercial,
        &record.stories,
        &record.commercial_type_1,
        &record.basement_type,
        &record.exterior_wall,
        &record.exterior_1,
        &record.construction,
        &record.total_rooms,
        &record.use_type,
        &record.business_license,
        &record.structure_area,
        &record.cubic_feet,
        &record.units,
        &record.commercial_type_2,
        &record.card,
        &record.cards,
        &record.dwelling_value,
        &record.commercial_type_3,
        &record.other_building,
        &record.land_appraised,
        &record.building_appraised,
        &record.total_appraised,
        &record.sams_address,
        &record.sams_city,
        &record.sams_state,
        &record.sams_zip,
        &record.pre_address_number,
        &record.address_number,
        &record.address_number_suffix,
        &record.full_name,
        &record.unit_type,
        &record.unit_id,
        &record.alternate_unit_type,
        &record.alternate_unit_id,
        &record.flood_risks,
        &record.oby_count,
        &record.sale_price,
        &record.developer_id,
        &record.building_permits,
    ];
    values
}